// source: proto/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.query.HOA', null, global);
goog.exportSymbol('proto.query.MapBounds', null, global);
goog.exportSymbol('proto.query.Query', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 17, null, null);
};
goog.inherits(proto.query.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.Query.displayName = 'proto.query.Query';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.query.Query.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.query.Query.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.MapBounds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.MapBounds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.MapBounds.displayName = 'proto.query.MapBounds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.HOA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.HOA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.query.HOA.displayName = 'proto.query.HOA';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.query.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    mapbounds: (f = msg.getMapbounds()) && proto.query.MapBounds.toObject(includeInstance, f),
    zoom: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    hoa: (f = msg.getHoa()) && proto.query.HOA.toObject(includeInstance, f)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.query.Query.extensions, proto.query.Query.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.Query}
 */
proto.query.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.Query;
  return proto.query.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.Query}
 */
proto.query.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.query.MapBounds;
      reader.readMessage(value,proto.query.MapBounds.deserializeBinaryFromReader);
      msg.setMapbounds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoom(value);
      break;
    case 16:
      var value = new proto.query.HOA;
      reader.readMessage(value,proto.query.HOA.deserializeBinaryFromReader);
      msg.setHoa(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.query.Query.extensionsBinary,
        proto.query.Query.prototype.getExtension,
        proto.query.Query.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMapbounds();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.MapBounds.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getHoa();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.query.HOA.serializeBinaryToWriter
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.query.Query.extensionsBinary, proto.query.Query.prototype.getExtension);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.query.Query.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.query.Query} returns this
 */
proto.query.Query.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.query.Query} returns this
 */
proto.query.Query.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.Query.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MapBounds mapBounds = 2;
 * @return {?proto.query.MapBounds}
 */
proto.query.Query.prototype.getMapbounds = function() {
  return /** @type{?proto.query.MapBounds} */ (
    jspb.Message.getWrapperField(this, proto.query.MapBounds, 2));
};


/**
 * @param {?proto.query.MapBounds|undefined} value
 * @return {!proto.query.Query} returns this
*/
proto.query.Query.prototype.setMapbounds = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.query.Query} returns this
 */
proto.query.Query.prototype.clearMapbounds = function() {
  return this.setMapbounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.Query.prototype.hasMapbounds = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 zoom = 3;
 * @return {number}
 */
proto.query.Query.prototype.getZoom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.query.Query} returns this
 */
proto.query.Query.prototype.setZoom = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.query.Query} returns this
 */
proto.query.Query.prototype.clearZoom = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.Query.prototype.hasZoom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional HOA hoa = 16;
 * @return {?proto.query.HOA}
 */
proto.query.Query.prototype.getHoa = function() {
  return /** @type{?proto.query.HOA} */ (
    jspb.Message.getWrapperField(this, proto.query.HOA, 16));
};


/**
 * @param {?proto.query.HOA|undefined} value
 * @return {!proto.query.Query} returns this
*/
proto.query.Query.prototype.setHoa = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.query.Query} returns this
 */
proto.query.Query.prototype.clearHoa = function() {
  return this.setHoa(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.Query.prototype.hasHoa = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.MapBounds.prototype.toObject = function(opt_includeInstance) {
  return proto.query.MapBounds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.MapBounds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.MapBounds.toObject = function(includeInstance, msg) {
  var f, obj = {
    westlng: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    eastlng: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    northlat: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    southlat: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.MapBounds}
 */
proto.query.MapBounds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.MapBounds;
  return proto.query.MapBounds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.MapBounds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.MapBounds}
 */
proto.query.MapBounds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWestlng(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEastlng(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNorthlat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSouthlat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.MapBounds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.MapBounds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.MapBounds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.MapBounds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double westLng = 1;
 * @return {number}
 */
proto.query.MapBounds.prototype.getWestlng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.query.MapBounds} returns this
 */
proto.query.MapBounds.prototype.setWestlng = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.query.MapBounds} returns this
 */
proto.query.MapBounds.prototype.clearWestlng = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.MapBounds.prototype.hasWestlng = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double eastLng = 2;
 * @return {number}
 */
proto.query.MapBounds.prototype.getEastlng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.query.MapBounds} returns this
 */
proto.query.MapBounds.prototype.setEastlng = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.query.MapBounds} returns this
 */
proto.query.MapBounds.prototype.clearEastlng = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.MapBounds.prototype.hasEastlng = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double northLat = 3;
 * @return {number}
 */
proto.query.MapBounds.prototype.getNorthlat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.query.MapBounds} returns this
 */
proto.query.MapBounds.prototype.setNorthlat = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.query.MapBounds} returns this
 */
proto.query.MapBounds.prototype.clearNorthlat = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.MapBounds.prototype.hasNorthlat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double southLat = 4;
 * @return {number}
 */
proto.query.MapBounds.prototype.getSouthlat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.query.MapBounds} returns this
 */
proto.query.MapBounds.prototype.setSouthlat = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.query.MapBounds} returns this
 */
proto.query.MapBounds.prototype.clearSouthlat = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.MapBounds.prototype.hasSouthlat = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.HOA.prototype.toObject = function(opt_includeInstance) {
  return proto.query.HOA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.HOA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.HOA.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    max: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.HOA}
 */
proto.query.HOA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.HOA;
  return proto.query.HOA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.HOA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.HOA}
 */
proto.query.HOA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.HOA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.query.HOA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.query.HOA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.query.HOA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 min = 1;
 * @return {number}
 */
proto.query.HOA.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.query.HOA} returns this
 */
proto.query.HOA.prototype.setMin = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.query.HOA} returns this
 */
proto.query.HOA.prototype.clearMin = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.HOA.prototype.hasMin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 max = 2;
 * @return {number}
 */
proto.query.HOA.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.query.HOA} returns this
 */
proto.query.HOA.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.query.HOA} returns this
 */
proto.query.HOA.prototype.clearMax = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.query.HOA.prototype.hasMax = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.query);
